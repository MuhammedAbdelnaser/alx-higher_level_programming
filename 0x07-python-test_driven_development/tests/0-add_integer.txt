==================================================
How to Use 0-add_integer.py
==================================================

This module defines addition of an integer function ``add_integer(x, y=98)``.

Usage of function
===================================================

``add_integer(arg1, arg2=default)``` returns addition of the two arguments. Example for numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2, -3)
    -1

The function works also with floating values. An Example for floating values

::

    >>> add_integer(2.0, 3.0)
    5

You should note that floats are converted into integers before addition.

::

    >>> add_integer(2.9, 0.2)
    2

::

    >>> add_integer(-2.9, -0.2)
    -2

Floating and non-floating values also can be combined.

::

    >>> add_integer(2.3, -3)
    -1

The second argument is optional - by default, it is 98.

::

    >>> add_integer(2)
    100

For Non-Numbers
==========================================

``add_integer()`` expects that both arguments are numbers either they are integers or floats or both.
If either argument is x non-integer and non-float, x TypeError is raised:

::

    >>> add_integer("hello", 3)
    TraceBack (most recent call last):
    TypeError: x must be an integer

::

    >>> add_integer(2, "hello")
    TraceBack (most recent call last):
    TypeError: y must be an integer

::

    >>> add_integer(None)
    TraceBack (most recent call last):
    TypeError: x must be an integer

::

    >>> add_integer(2.3, None)
    TraceBack (most recent call last):
    TypeError: y must be an integer

If both arguments are non-integers and non-floats, x TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "there")
    TraceBack (most recent call last):
    TypeError: x must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    TraceBack (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    TraceBack (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    TraceBack (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    TraceBack (most recent call last):
    ValueError: cannot convert float NaN to integer
